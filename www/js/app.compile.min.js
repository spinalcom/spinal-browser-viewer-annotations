angular.module('app.route',['ngRoute']),angular.module('app.services',[]),angular.module('app.directives',[]),angular.module('app.controllers',[]),angular.module('app.spinalcom',['settings','ngMaterial']),angular.module('SpinalApp',['ngAnimate','ngMaterial','app.directives','app.route','app.services','app.controllers','ngMdIcons','settings','app.spinalcom']).run(['$rootScope','$location','authService',function(a,b,c){let d=c.get_user();a.$on('$routeChangeStart',function(a,e){e.$$route.authenticate&&!c.is_Connected()&&c.login(d.username,d.password).then(function(){},function(){b.path('/login')})})}]).config(['$mdThemingProvider',function(a){a.theme('altTheme').primaryPalette('grey',{default:'200'}).accentPalette('grey',{default:'700'}).dark(),a.theme('default').dark(),a.setDefaultTheme('altTheme'),a.alwaysWatchTheme(!0)}]).run(['$templateCache','$http',function(a,b){let c=(c,d)=>{b.get(c).then((b)=>{a.put(d,b.data)},()=>{console.log('Cannot load the file '+c)})},d=[{uri:'app/templates/forgeviewer.html',name:'forgeviewer.html'}];for(var e=0;e<d.length;e++)c(d[e].uri,d[e].name)}]);
angular.module('settings',[]).constant('config',{main_path:'/',spinalhub_url:'127.0.0.1',spinalhub_port:'8888',spinalhub_user:'168'});
angular.module("app.route").config(["$routeProvider","$locationProvider",function(a){a.when("/viewer/:filepath",{templateUrl:"app/templates/main.html",authenticate:!0,controller:"mainCtrl"}).when("/login",{templateUrl:"app/templates/login.html",authenticate:!1,controller:"loginCtrl"}).when("/404",{authenticate:!1,controller:["$location",function(a){a.replace("/drive/")}]}).otherwise({redirectTo:"/404"})}]);
angular.module('app.directives').directive('navbar',[function(){return{restrict:'E',templateUrl:'app/templates/navbar.html',controller:'navbarCtrl'}}]).directive('menuGlayout',['goldenLayoutService','$timeout',function(a){return{restrict:'E',scope:{layoutInfo:'=info'},replace:!0,template:'<li ng-repeat="layout in layoutInfo"  id="{{layout.id}}"><a >{{layout.name}}</a></li>',link:(b)=>{a.wait_ready().then(()=>{let c=(a,b)=>()=>{a.createChild(b.cfg)};for(var d=0;d<b.layoutInfo.length;d++){let e=b.layoutInfo[d];a.createDragSource($('#'+e.id)[0],e.cfg),$('#'+e.id).click(c(a,e))}})}}}]).directive('ngRightClick',['$parse',function(a){return function(b,c,d){var e=a(d.ngRightClick);c.bind('contextmenu',function(a){b.$apply(function(){a.preventDefault(),e(b,{$event:a})})})}}]);
angular.module('app.spinalcom').factory('ngSpinalCore',['$q',function(a){var b={};return b.conn=0,b.connect=function(a){b.conn=spinalCore.connect(a)},b.store=function(c,d){var e=a.defer();return spinalCore.store(b.conn,c,d,function(a){e.resolve(a)},function(){e.reject()}),e.promise},b.load=function(c){var d=a.defer();return spinalCore.load(b.conn,c,function(a){d.resolve(a)},function(){d.reject()}),d.promise},b.load_type=function(c,d){var e=a.defer();return spinalCore.load_type(b.conn,c,d,function(a){e.resolve(a)},function(){e.reject()}),e.promise},b.load_right=function(c){var d=a.defer();return spinalCore.load_right(b.conn,c,function(a){d.resolve(a)},function(){d.reject()}),d.promise},b.share_model=function(a,c,d,e){return spinalCore.share_model(b.conn,a,c,d,e)},b}]);
angular.module('app.spinalcom').factory('spinalModelDictionary',['$q','ngSpinalCore','config','authService','$routeParams','$location',function(a,b,c,d,e,f){let g={};return g.model=0,g.init=()=>{var c=a.defer();return 0==g.model?d.wait_connect().then(()=>{let a=d.get_user(),h=e.filepath;h&&(h=atob(h),b.load(h).then((a)=>{g.model=a,console.log(a),c.resolve(a)},()=>{let a='not able to load : '+h;console.error(a),f.replace('/drive/'),c.reject(a)}))},()=>{let a='not able to load : '+path;console.error(a),f.replace('/drive/'),c.reject(a)}):c.resolve(g.model),c.promise},g}]);
angular.module('app.services').factory('goldenLayoutService',['$q','$window','$templateCache','$rootScope','$compile',function(a,b,c,d,e){var f={content:[{type:'row',content:[{isClosable:!1,title:'Viewer',type:'component',componentName:'SpinalHome',componentState:{template:'forgeviewer.html',controller:'forgeViewerCtrl'}}]}]};let g=0,h={};return h.init=()=>{0==g&&(g=new GoldenLayout(f,$('#g-layout')),g.registerComponent('SpinalHome',function(a,b){var f=a.getElement();''==b.template?(f.html(),e(f.contents())(d)):(f.html('<div class="gpannel-content" ng-controller="'+b.controller+'" ng-cloak>'+c.get(b.template)+'</div>'),e(f.contents())(d))}),g.init(),angular.element(b).bind('resize',function(){g.updateSize()}),d.$emit('GoldenLayout_READY'))},h.wait_ready=()=>a(function(a){d.$on('GoldenLayout_READY',()=>{a()})}),h.createChild=(a)=>{g.root.contentItems[0].addChild(a)},h.createDragSource=(a,b)=>{g.createDragSource(a,b)},h}]).factory('layout_uid',function(){let a=0;return{get:()=>{let b=a++;return b}}});
angular.module('app.spinalcom').factory('authService',['$q','ngSpinalCore','config','$http',function(a,b,c,d){let e={},f={username:'',password:''},g=!1;e.save_user=(a,b)=>{f.username=a,f.password=b,window.localStorage.setItem('spinalhome_cfg',btoa(JSON.stringify(f)))},e.get_user=()=>{let a=window.localStorage.getItem('spinalhome_cfg');return a&&(f=JSON.parse(atob(a))),f},e.save_user=(a,b)=>{f.username=a,f.password=b,window.localStorage.setItem('spinalhome_cfg',btoa(JSON.stringify(f)))},e.logout=()=>{''!=f.username&&(e.save_user('',''),location.reload())},e.login=(f,j)=>{let k=a.defer();return d.get('/get_user_id'+'?u='+f+'&p='+j).then(function(a){var d=parseInt(a.data),l=0;if(-1==d){for(k.reject('Login Error: username / password pair not found.'),l=0;l<h.length;l++)h[l].reject();return void(h=[])}for(b.connect('http://'+d+':'+j+'@'+c.spinalhub_url+':'+c.spinalhub_port+'/'),e.save_user(f,j),g=!0,k.resolve(),l=0;l<h.length;l++)h[l].resolve();h=[]},function(){k.reject('Connection Error: Imposible to connect to the server.');for(var a=0;a<h.length;a++)h[a].reject();h=[]}),k.promise},e.is_Connected=()=>g;let h=[];return e.wait_connect=()=>{let b=a.defer();return!0==g?b.resolve():h.push(b),b.promise},e}]);
angular.module('app.controllers').controller('mainCtrl',['$scope','$routeParams','goldenLayoutService','spinalModelDictionary',function(a,b,c){c.init()}]);
angular.module('app.controllers').controller('navbarCtrl',['$scope','authService','$location',function(a,b,c){a.username='',a.connected=!1,b.wait_connect().then(()=>{a.username=b.get_user().username,a.connected=!0}),a.logout=()=>{c.path('/login')},a.layouts=[{id:'drag-viewer',name:'viewer',cfg:{isClosable:!0,title:'Viewer',type:'component',componentName:'SpinalHome',componentState:{template:'forgeviewer.html',controller:'forgeViewerCtrl'}}}]}]);
angular.module('app.controllers').controller('forgeViewerCtrl',['$scope','$rootScope','$mdDialog','authService','$compile','$injector','layout_uid','spinalModelDictionary',function(a,b,c,d,e,f,g,h){a.injector=f,a.uid=g.get(),h.init().then(function(b){function c(){return h=g.bubble.search({type:'geometry',role:'3d'}),0===h.length?void console.error('Document contains no viewables.'):void g.selectItem(h[h.length-1].data,e,f)}function d(a){console.error('onDocumentLoadFailure() - errorCode:'+a)}function e(a){console.log('Viewers are equal: '+(a===g.getCurrentViewer()))}function f(a){console.error('onItemLoadFail() - errorCode:'+a)}var g,h;console.log(b);var i={extensions:['PanelExtension','Autodesk.ADN.Viewing.Extension.Color']},j={env:'AutodeskProduction',accessToken:''},k='urn:'+b.urn.get();(function(a,b,c){a.oauth.set(''),a.ask_token.set(!0);var d=!0,e=function(){d&&''!=a.oauth.get()&&(d=!1,a.oauth.unbind(e),j.accessToken=a.oauth.get(),c(b))};a.oauth.bind(e)})(b,k,function(b){Autodesk.Viewing.Initializer(j,function(){g=new Autodesk.Viewing.ViewingApplication('MyViewerDiv'+a.uid),console.log(g),g.registerViewer(g.k3D,Autodesk.Viewing.Private.GuiViewer3D,i),g.loadDocument(b,c,d)})})})}]);
angular.module('app.controllers').controller('loginCtrl',['$scope','authService','$mdToast','$location',function(a,b,c,d){let e=c.simple().hideDelay(3e3),f=b.get_user();b.logout(),a.conf={email:'',password:''},a.ConnectBtn=()=>{b.login(a.conf.email,a.conf.password).then(()=>{d.path('/home')},(a)=>{e.textContent(a),c.show(e)})}}]);

//# sourceMappingURL=app.compile.min.js.map
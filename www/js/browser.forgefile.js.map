{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "../spinal-lib-forgefile/forgefile.js"
  ],
  "names": [],
  "mappings": "AAAA;m8BCkBI,EAAA,SAAA,GACkB,SAAA,yBAAA,4MAmBhB,GAhBF,EACS,MAAP,GAAc,EAAd,WACK,EAAI,WACT,MAAO,GAAP,EAAA,KACK,EAAI,KACT,MAAO,GAAP,EAAA,KACK,EAAA,KAEN,UAEC,EAAA,UACA,MAAA,EACA,WAAW,EACX,aAJF,KAAA,KAOE,EACD,OAAA,2BAAA,GAGC,IAAA,KADF,KACM,EAEF,GADE,EAAO,GACT,EAAI,eAAc,GAAA,CAChB,GAAA,SAAA,EADF,SAGE,GAAA,aAAM,EAEJ,IAAA,EAAO,EAAA,GADT,EAAK,EAAO,IACV,OAAA,EAAA,EAAA,IACA,EAAK,EAAA,GACN,EAAA,UAAA,IAAA,yBAAA,SAGF,EAAA,GAAA,EAAA,GAIN,OAvCmB,EAAA,SAAA,GAuCnB,EAxCmE,0CAoDtE,OApDI,EAAA,2BAAA,IAAA,gCAAA,MAAA,SAAA,OAAA,IAAA,YA4CA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MA7CC,IAAA,eAgDA,MAAA,SAAqB,GACtB,OAAA,aAAA,6BAjDH,yBAAI,gCAsDA,IAAA,EAAA,SAAA,GAC+B,SAArB,gPAGR,GACA,MAAA,EACA,WAAW,EACX,aACA,KAAA,EACA,SAAO,IAAI,KAMX,MAZQ,IAAA,OAAA,GAAA,UAAA,YAAA,sBAAA,qBAAA,4BAAA,cAAA,wBAAA,mBAAA,WAaR,IAAA,GACA,WAdQ,EAeR,MAAA,GAfF,WAAA,IAkBD,OApBgC,EAAA,SAAA,GAoBhC,EArB6C,sCAA5C,EAAA,gBAAA,IAAA,YAuBA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MAxBC,IAAA,eA0BA,MAAA,SAAsB,GACvB,OAAA,aAAA,MA3BH,cAAI,qBAgCA,IAAA,EAAA,SAAA,GAC8B,SAApB,8MAYX,OARG,EAAI,UACJ,GAAA,GACA,MAAO,GACP,MAAA,GACA,SAAM,GACN,KAAA,KANY,MAOZ,MAAA,GAPF,eASD,EAbqC,2BAexC,OAfA,UAAI",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\nvar exports = module.exports = {};\n\n\nvar ForgeFileDerivativesItem = class ForgeFileDerivativesItem extends Model {\n  constructor(params) {\n    var i, item, k, len, name, ref, res, v;\n    super();\n    if (params != null && params.outputType) {\n      name = params.outputType;\n    } else if (params != null && params.name) {\n      name = params.name;\n    } else if (params != null && params.role) {\n      name = params.role;\n    } else {\n      name = \"no name\";\n    }\n    this.add_attr({\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n    });\n    if (!params) {\n      return;\n    }\n    res = {};\n    for (k in params) {\n      v = params[k];\n      if (params.hasOwnProperty(k)) {\n        if (k === \"name\") {\n          continue;\n        } else if (k === \"children\") {\n          ref = params[k];\n          for (i = 0, len = ref.length; i < len; i++) {\n            item = ref[i];\n            this.add_child(new ForgeFileDerivativesItem(item));\n          }\n        } else {\n          res[k] = params[k];\n        }\n      }\n    }\n    this.add_attr(res);\n  }\n\n  display_suppl_context_actions(context_action) {}\n  add_child(child) {\n    this._children.push(child);\n  }\n\n  accept_child(ch) {\n    return ch instanceof ForgeFileDerivativesItem;\n  }\n\n};\nexports.ForgeFileDerivativesItem = ForgeFileDerivativesItem;\n\nvar ForgeFileItem = class ForgeFileItem extends Model {\n  constructor(name = \"Forge File\") {\n    super();\n    let tmp = {\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n      filepath: new Path(),\n      state: new Choice(0, [\"Initial\",\n        \"Uploading\", \"Uploading completed\",\n        \"Uploading to forge\", \"Upload to forge completed\",\n        \"Translating\", \"Translating completed\",\n        \"Export completed\", \"Failed\"\n      ]),\n      urn: \"\",\n      ask_token: false,\n      oauth: \"\",\n      bucket_key: \"\"\n    };\n    this.add_attr(tmp);\n  }\n  add_child(child) {\n    this._children.push(child);\n  }\n  accept_child(ch) {\n    return (ch instanceof ForgeFileDerivativesItem);\n  }\n};\n\nexports.ForgeFileItem = ForgeFileItem;\n\nvar NoteModel = class NoteModel extends Model {\n  constructor(name = \"NoteModel\") {\n    super();\n\n    this.add_attr({\n      id: '',\n      title: '',\n      color: '',\n      username: '',\n      date: Date.now(),\n      owner: \"\",\n      allObject: []\n    });\n  }\n}\nexports.NoteModel = NoteModel;"
  ]
}
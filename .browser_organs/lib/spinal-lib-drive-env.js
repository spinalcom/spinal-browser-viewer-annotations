(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function(n){"use strict";var t=function(){function n(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}return function(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}}();function e(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";e(this,n),this.name=t,this.label=i,this.id=o,this.icon=r,this.description=a,this.order_priority=0}return t(n,[{key:"action",value:function(n){}},{key:"launch_action",value:function(n){this.action(n)}},{key:"is_shown",value:function(n){return!0}}]),n}();i.SetLog=!1,module.exports=i,n._createClass=t,n._classCallCheck=e,n.SpinalDrive_App=i}).call(window,window);

},{}],2:[function(require,module,exports){
(function(i){"use strict";var t=function(){function i(i,t){for(var e=0;e<t.length;e++){var n=t[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(i,n.key,n)}}return function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}}();function e(i,t){if(!(i instanceof t))throw new TypeError("Cannot call a class as a function")}var n=require("./SpinalDrive_App"),r=function(){function i(){e(this,i),this._list=[]}return t(i,[{key:"is_valid_obj",value:function(i){return void 0!==i.name&&void 0!==i.label&&void 0!==i.id&&void 0!==i.icon&&void 0!==i.description}},{key:"push",value:function(i){if(i instanceof n||this.is_valid_obj(i)){for(var t=0;t<this._list.length;t++)if(this._list[t].name===i.name)return void(this._list[t]=i);this._list.push(i)}else console.error("Error trying to Push not a SpinalDrive_App Object or equivalent.")}},{key:"remove_by_name",value:function(i){if(void 0!==i)for(var t=0;t<this._list.length;t++)if(i===this._list[t].name)return this._list.splice(t,1),!0;return!1}},{key:"remove_by_id",value:function(i){if(void 0!==i)for(var t=0;t<this._list.length;t++)if(i===this._list[t].id)return this._list.splice(t,1),!0;return!1}},{key:"get",value:function(i){return void 0===i?this._list[i]:this._list}},{key:"length",value:function(){return this._list.length}},{key:"get_by_name",value:function(i){for(var t=0;t<this._list.length;t++)if(i===this._list[t].name)return this._list[t];return 0}}]),i}();module.exports=r,i._createClass=t,i._classCallCheck=e,i.SpinalDrive_App=n,i.SpinalDrive_App_list=r}).call(window,window);

},{"./SpinalDrive_App":1}],3:[function(require,module,exports){
(function(n){"use strict";var t=function(){function n(n,t){for(var i=0;i<t.length;i++){var e=t[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(t,i,e){return i&&n(t.prototype,i),e&&n(t,e),t}}();function i(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}var e=require("./SpinalDrive_App"),r=require("./SpinalDrive_App_list"),o=function(){function n(){i(this,n),this.containerLst={},this.context_file_exp_app_icon={Directory:"folder",Session:"desktop_windows",default:"insert_drive_file"}}return t(n,[{key:"add_applications",value:function(n,t){return this.containerLst[n]||(this.containerLst[n]=new r),this.containerLst[n].push(t)}},{key:"get_applications",value:function(n,t){return this.containerLst[n]||(this.containerLst[n]=new r),this.containerLst[n]._list.filter(function(n){return n.is_shown(t)}).sort(function(n,t){return n.order_priority<t.order_priority})}}]),n}();module.exports=o,n._createClass=t,n._classCallCheck=i,n.SpinalDrive_App=e,n.SpinalDrive_App_list=r,n.SpinalDrive_Env=o}).call(window,window);

},{"./SpinalDrive_App":1,"./SpinalDrive_App_list":2}],4:[function(require,module,exports){
!function(e){"use strict";var i=require("./core/SpinalDrive_Env"),n=new i;module.exports=n,e.SpinalDrive_Env=i,e.spinalDrive_Env=n}(window);

},{"./core/SpinalDrive_Env":3}],5:[function(require,module,exports){
(function(e){"use strict";var t=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){function i(){r(this,i);var e=o(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"DeleleFileExplorer","Delete",1,"delete","Delete the file"));return e.order_priority=-1,e}return n(i,SpinalDrive_App),t(i,[{key:"action",value:function(e){var t=e.scope.injector.get("$mdDialog"),r="Are you sure to delete the file / folder";e&&e.file&&e.file.name&&(r+=" : "+e.file.name);var o=t.confirm().title("Delete").textContent(r).ariaLabel("Delete Directory file").clickOutsideToClose(!0).ok("Confirm").cancel("Cancel");t.show(o).then(function(){if(e&&e.scope&&e.scope.curr_dir&&e.file&&e.file._server_id){var t=FileSystem._objects[e.file._server_id];if(t)for(var r=e.scope.curr_dir,o=0;o<r.length;o++)if(r[o]._server_id==t._server_id&&e.file.name==r[o].name.get()){r.remove_ref(r[o]);break}}},function(){})}}]),i}();module.exports.FileExplorerDelete=i;var l=function(e){function i(){return r(this,i),o(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"DeleleFolderExplorer","Delete",0,"fa fa-trash text-danger","Delete the file"))}return n(i,SpinalDrive_App),t(i,[{key:"action",value:function(e){var t=e.scope.injector.get("$mdDialog"),r=e.scope.injector.get("spinalFileSystem"),o="Are you sure to delete the folder";e&&e.node&&e.node.text&&(o+=" : "+e.node.text);var n=t.confirm().title("Delete").textContent(o).ariaLabel("Delete Directory file").clickOutsideToClose(!0).ok("Confirm").cancel("Cancel");t.show(n).then(function(){r.deleteFolder(e.scope.all_dir,e.node)},function(){})}}]),i}();module.exports.FolderExplorerDelete=l,e._createClass=t,e._classCallCheck=r,e._possibleConstructorReturn=o,e._inherits=n,e.SpinalDrive_App_FileExplorer_delete=i,e.SpinalDrive_App_FolderExplorer_delete=l}).call(window,window);

},{}],6:[function(require,module,exports){
(function(t){"use strict";var e=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}();function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var a=function(t){function e(){return o(this,e),n(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,SpinalDrive_App),e}();a.DialogEditCtrl=function(t,e,o,n,i,a){var r=FileSystem._objects[o];t.editModel=r,t.modelData=r.get(),t.editModelContruct=r.constructor.name,t.editForm={},t.cancelDialog=function(){e.hide()},t.submitDialog=function(){r.set(t.editForm.modelData.$modelValue),e.hide()},t.isStr=function(t){return t instanceof Str},t.isVal=function(t){return t instanceof Val},t.isBool=function(t){return t instanceof Bool}},a.EditTemplate='<md-dialog aria-label="Sharing setting">  <md-dialog-content style="padding-left: 10px;padding-right: 10px;">        <h3>Edit Setting</h3>        <h5 style="margin-top: 30px;margin-bottom: 35px;">Type: {{editModelContruct}}</h5><form name="editForm" ng-submit="submitDialog()">    <md-input-container ng-if="isStr(editModel)" style="margin: 0;" class="md-block">      <label>Data</label>      <input ng-model="modelData" name="modelData" md-autofocus>    </md-input-container>    <md-input-container ng-if="isVal(editModel)" style="margin: 0;" class="md-block">      <label>Data</label>      <input type="number" name="modelData"  ng-model="modelData" md-autofocus>    </md-input-container>    <md-input-container ng-if="isBool(editModel)"style="margin: 0;" class="md-block">      <label>Data</label>      <md-select name="modelData"ng-model="modelData" md-autofocus>        <md-option value=true>true</md-option>        <md-option value=false>false</md-option>      </md-select>    </md-input-container> <p class="p-error fadein" ng-repeat="error_msg in error_msgs">{{error_msg}}</p>  </md-dialog-content>  <md-dialog-actions>    <md-buttongfngf ng-click="cancelDialog()" class="md-primary">      Cancel    </md-button>    <md-button ng-click="submitDialog()" class="md-primary">      Submit    </md-button>  </md-dialog-actions></md-dialog>';var r=function(t){function r(){return o(this,r),n(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,"EditInspector","Edit...",3,"edit","Edit Atomic Models..."))}return i(r,a),e(r,[{key:"action",value:function(t){var e=t.scope.injector.get("spinalModelDictionary"),o=t.scope.injector.get("$mdDialog"),n=t.scope.injector.get("ngSpinalCore");o.show({ariaLabel:"Edit",controller:["$scope","$mdDialog","model_server_id","spinalModelDictionary","mdDialog","ngSpinalCore",a.DialogEditCtrl],template:a.EditTemplate,parent:angular.element(document.body),clickOutsideToClose:!0,locals:{model_server_id:t.model_server_id,spinalModelDictionary:e,mdDialog:o,ngSpinalCore:n}})}},{key:"is_shown",value:function(t){if(t&&t.data&&t.data._server_id){var e=FileSystem._objects[t.data._server_id];if(e)return e instanceof Val||e instanceof Bool||e instanceof Str}return!1}}]),r}();module.exports.InspectorEdit=r,t._createClass=e,t._classCallCheck=o,t._possibleConstructorReturn=n,t._inherits=i,t.SpinalDrive_App_Edit=a,t.SpinalDrive_App_Inspector_edit=r}).call(window,window);

},{}],7:[function(require,module,exports){
(function(e){"use strict";var r=function(){function e(e,r){for(var t=0;t<r.length;t++){var i=r[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(r,t,i){return t&&e(r.prototype,t),i&&e(r,i),r}}();function t(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function i(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function o(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}var n=function(e){function n(){return t(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"IssimFileExplorerCurrDir","New Is'sim app",1,"desktop_windows","Create an Is'sim app"))}return o(n,SpinalDrive_App),r(n,[{key:"action",value:function(e){var r=e.scope.injector.get("$mdDialog"),t=r.prompt().title("New Is'sim session Project").placeholder("Project session name").ariaLabel("new issim").clickOutsideToClose(!0).required(!0).ok("Create!").cancel("Cancel");r.show(t).then(function(r){var t=e.scope.curr_dir;t&&t.add_file(r,0,{model_type:"Session",icon:"Session"})},function(){})}}]),n}();module.exports.FileExplorerCurrDirIssim=n;var s=function(n){function s(){t(this,s);var e=i(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,"IssimFileExplorer","Open with Is'sim",1,"desktop_windows","Open with Is'sim"));return e.order_priority=5,e}return o(s,SpinalDrive_App),r(s,[{key:"action",value:function(r){for(var t=r.scope.injector.get("authService"),i=r.scope.fs_path,o="/__users__/"+t.get_user().username,n=1;n<i.length;n++)o+="/"+i[n].name;o+="/"+r.file.name;var s=e.open("","");s.document.location="/html/lab.html#"+encodeURI(o),s.focus()}},{key:"is_shown",value:function(e){if(e&&e.file&&e.file._server_id){var r=FileSystem._objects[e.file._server_id];if(r&&r instanceof File&&r._info.model_type&&"Session"===r._info.model_type.get())return!0}return!1}}]),s}();module.exports.FileExplorerIssim=s,e._createClass=r,e._classCallCheck=t,e._possibleConstructorReturn=i,e._inherits=o,e.SpinalDrive_App_FileExplorer_currdir_issim=n,e.SpinalDrive_App_FileExplorer_issim=s}).call(window,window);

},{}],8:[function(require,module,exports){
(function(e){"use strict";var t=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,SpinalDrive_App),t}();a.DialogShareCtrl=function(e,t,r,o,i,a){function n(e,t){return e&t?"Yes":"No"}o.init().then(function(){e.users=o.users.get(),e.rightRead=!1,e.rightWrite=!1,e.rightShare=!1,e.users.forEach(function(e){e.share_selected=!1,e._lowername=e.name.toLowerCase()});var t=FileSystem._objects[r],i=0;i=t instanceof File?t._ptr.data.value:t instanceof Ptr?t.data.value:t._server_id,a.load_right(i).then(function(t){!function(t){e.selectedModelShared_to_user=[];for(var r=0;r<t.length;r++){var o=t[r];e.selectedModelShared_to_user.push({id:o.user.id.get(),name:o.user.name.get(),rd:n(o.flag.get(),spinalCore.right_flag.RD),wr:n(o.flag.get(),spinalCore.right_flag.WR),ad:n(o.flag.get(),spinalCore.right_flag.AD)})}}(t)},function(e){console.error("load_right: couldn't load the right of the model "+r)})}),e.transformChip=function(e){return angular.isObject(e)?e:{name:e,type:"new"}},e.error_msgs=[],e.chip_users=[],e.selectedItem=null,e.searchText=null,e.createFilterFor=function(e){var t=angular.lowercase(e);return function(e){return 0===e._lowername.indexOf(t)||0===e.id.toString().indexOf(t)}},e.querySearch=function(t){return t?e.users.filter(e.createFilterFor(t)):[]},e.cancelDialog=function(){t.hide()},e.submitDialog=function(){var o=0;if(e.error_msgs=[],1==e.rightRead&&(o|=spinalCore.right_flag.RD),1==e.rightWrite&&(o|=spinalCore.right_flag.WR),1==e.rightShare&&(o|=spinalCore.right_flag.AD),0==e.chip_users.length&&e.error_msgs.push("Add some user(s) to share."),0==o&&e.error_msgs.push("Choose the Right access to give."),0==e.error_msgs.length){var i=FileSystem._objects[r],n="";n=i.name?i.name.get():i.constructor.name+"_"+i._server_id;for(var l=0;l<e.chip_users.length;l++)a.share_model(i,n,o,e.chip_users[l].name);t.hide()}}},a.shareTemplate='<md-dialog aria-label="Sharing setting">  <md-dialog-content style="padding-left: 10px;padding-right: 10px;">        <h3>Sharing setting</h3>        <h5 style="margin-top: 30px;margin-bottom: 0px;">Invite people:</h5>        <md-chips ng-model="chip_users" md-autocomplete-snap md-transform-chip="transformChip($chip)" md-require-match="true">        <md-autocomplete md-selected-item="selectedItem" md-search-text="searchText" md-items="item in querySearch(searchText)"          md-item-text="item.name" placeholder="User(s) to share...">          <span md-highlight-text="searchText">{{item.id}} - {{item.name}}</span>        </md-autocomplete>        <md-chip-template>          <span>            <strong>{{$chip.name}}</strong>            <em>({{$chip.id}})</em>          </span>        </md-chip-template>     </md-chips>        <h5 style="margin-top: 30px;margin-bottom: 0px;">Who has access:</h5>      <md-table-container>        <table md-table>          <thead md-head>            <tr style="height: 25px;">              <th md-column>Id</th>              <th md-column style="width: 30%;">User</th>              <th md-column>Read</th>              <th md-column>Write</th>              <th md-column>Admin</th>            </tr>          </thead>          <tbody md-body>            <tr  md-select-id="name" ng-repeat="_user in selectedModelShared_to_user" file-obj="file">              <td md-cell>{{_user.id}}</td>              <td md-cell>{{_user.name}}</td>              <td md-cell>{{_user.rd}}</td>              <td md-cell>{{_user.wr}}</td>              <td md-cell>{{_user.ad}}</td>            </tr>          </tbody>        </table>      </md-table-container>        <h5 style="margin-top: 30px;margin-bottom: 0px;">Right access to give:</h5>    <md-input-container style="margin: 0;" class="md-block">        <md-switch class="md-primary" style="margin: 15px;" name="Read" ng-model="rightRead">          Read        </md-switch>        <md-switch class="md-primary" style="margin: 15px;" name="Write" ng-model="rightWrite">          Write        </md-switch>        <md-switch class="md-primary" style="margin: 15px;" name="Share" ng-model="rightShare">          Share        </md-switch>    </md-input-container> <p class="p-error fadein" ng-repeat="error_msg in error_msgs">{{error_msg}}</p>  </md-dialog-content>  <md-dialog-actions>    <md-button ng-click="cancelDialog()" class="md-primary">      Cancel    </md-button>    <md-button ng-click="submitDialog()" class="md-primary">      Submit    </md-button>  </md-dialog-actions></md-dialog>';var n=function(e){function n(){return r(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"ShareFileExplorer","Share...",2,"share","Share Models with other Users"))}return i(n,a),t(n,[{key:"action",value:function(e){console.log(e);var t=e.scope.injector.get("spinalModelDictionary"),r=e.scope.injector.get("$mdDialog"),o=e.scope.injector.get("ngSpinalCore");r.show({controller:["$scope","$mdDialog","model_server_id","spinalModelDictionary","mdDialog","ngSpinalCore",a.DialogShareCtrl],template:a.shareTemplate,parent:angular.element(document.body),targetEvent:e.evt,clickOutsideToClose:!0,locals:{model_server_id:e.file._server_id,spinalModelDictionary:t,mdDialog:r,ngSpinalCore:o}})}}]),n}();module.exports.FileExplorerShare=n;var l=function(e){function n(){return r(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"ShareFolderExplorer","Share...",3,"fa fa-share-alt","Share Models with other Users"))}return i(n,a),t(n,[{key:"action",value:function(e){var t=e.scope.injector.get("spinalModelDictionary"),r=e.scope.injector.get("$mdDialog"),o=e.scope.injector.get("ngSpinalCore");r.show({controller:["$scope","$mdDialog","model_server_id","spinalModelDictionary","mdDialog","ngSpinalCore",a.DialogShareCtrl],template:a.shareTemplate,parent:angular.element(document.body),clickOutsideToClose:!0,locals:{model_server_id:e.model_server_id,spinalModelDictionary:t,mdDialog:r,ngSpinalCore:o}})}}]),n}();module.exports.FolderExplorerShare=l;var s=function(e){function n(){return r(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,"ShareInspector","Share...",3,"share","Share Models with other Users"))}return i(n,a),t(n,[{key:"action",value:function(e){var t=e.scope.injector.get("spinalModelDictionary"),r=e.scope.injector.get("$mdDialog"),o=e.scope.injector.get("ngSpinalCore");r.show({controller:["$scope","$mdDialog","model_server_id","spinalModelDictionary","mdDialog","ngSpinalCore",a.DialogShareCtrl],template:a.shareTemplate,parent:angular.element(document.body),clickOutsideToClose:!0,locals:{model_server_id:e.model_server_id,spinalModelDictionary:t,mdDialog:r,ngSpinalCore:o}})}},{key:"is_shown",value:function(e){return!0}}]),n}();module.exports.InspectorShare=s,e._createClass=t,e._classCallCheck=r,e._possibleConstructorReturn=o,e._inherits=i,e.SpinalDrive_App_share=a,e.SpinalDrive_App_FileExplorer_share=n,e.SpinalDrive_App_FolderExplorer_share=l,e.SpinalDrive_App_Inspector_share=s}).call(window,window);

},{}],9:[function(require,module,exports){
(function(e){"use strict";var r=function(){function e(e,r){for(var o=0;o<r.length;o++){var t=r[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(r,o,t){return o&&e(r.prototype,o),t&&e(r,t),r}}();function o(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function t(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function n(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}var l=function(e){function l(){return o(this,l),t(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,"NewFolderFileExplorerCurrDir","New Folder...",1,"create_new_folder","Create a new Folder"))}return n(l,SpinalDrive_App),r(l,[{key:"action",value:function(e){var r=e.scope.injector.get("$mdDialog"),o=e.scope.injector.get("spinalFileSystem");console.log(e);var t=r.prompt().title("New Folder").placeholder("Untitled folder").ariaLabel("New Folder").initialValue("Untitled folder").clickOutsideToClose(!0).required(!0).ok("Create!").cancel("Cancel");e.original={model:e.model._server_id},r.show(t).then(function(r){o.newFolder(null,e,r)},function(){})}}]),l}();module.exports.FileExplorerCurrDirNewFolder=l;var i=function(e){function l(){return o(this,l),t(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,"NewFolderFolderExplorer","New Folder...",1,"fa fa-folder","Create a new Folder"))}return n(l,SpinalDrive_App),r(l,[{key:"action",value:function(e){var r=e.scope.injector.get("$mdDialog"),o=e.scope.injector.get("spinalFileSystem");console.log(e);var t=r.prompt().title("New Folder").placeholder("Untitled folder").ariaLabel("New Folder").clickOutsideToClose(!0).initialValue("Untitled folder").required(!0).ok("Create!").cancel("Cancel");r.show(t).then(function(r){o.newFolder(e.scope.all_dir,e.node,r)},function(){})}}]),l}();module.exports.FolderExplorerNewFolder=i,e._createClass=r,e._classCallCheck=o,e._possibleConstructorReturn=t,e._inherits=n,e.SpinalDrive_App_FileExplorer_currdir_newFolder=l,e.SpinalDrive_App_FolderExplorer_newFolder=i}).call(window,window);

},{}],10:[function(require,module,exports){
(function(e){"use strict";var t=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(e){function i(){return n(this,i),r(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"RenameFileExplorer","Rename...",1,"edit","Rename a File"))}return o(i,SpinalDrive_App),t(i,[{key:"action",value:function(e){var t=e.scope.injector.get("$mdDialog"),n=(e.scope.injector.get("spinalFileSystem"),FileSystem._objects[e.file._server_id]),r=t.prompt().title("Rename").placeholder("File Name").ariaLabel("Rename").clickOutsideToClose(!0).required(!0).ok("Rename!").cancel("Cancel");n&&n.name&&n.name.get()&&r.initialValue(n.name.get()),t.show(r).then(function(t){if(n.name.get()!==t){for(var r=0;r<e.scope.curr_dir.length;r++)if(e.scope.curr_dir[r].name.get()===t){var o=e.scope.injector.get("$mdToast");return void o.show(o.simple().theme("error-toast").textContent("Error rename: File with this name already exist."))}n.name.set(t)}},function(){})}}]),i}();module.exports.FileExplorerRename=i,e._createClass=t,e._classCallCheck=n,e._possibleConstructorReturn=r,e._inherits=o,e.SpinalDrive_App_FileExplorer_rename=i}).call(window,window);

},{}],11:[function(require,module,exports){
"use strict";!function(){var e=require("./base/SpinalDrive_App_delete").FileExplorerDelete,r=require("./base/SpinalDrive_App_delete").FolderExplorerDelete;spinalDrive_Env.add_applications("FileExplorer",new e),spinalDrive_Env.add_applications("FolderExplorer",new r)}();

},{"./base/SpinalDrive_App_delete":5}],12:[function(require,module,exports){
"use strict";!function(){var i=require("./base/SpinalDrive_App_edit").InspectorEdit;spinalDrive_Env.add_applications("Inspector",new i)}();

},{"./base/SpinalDrive_App_edit":6}],13:[function(require,module,exports){
"use strict";!function(){var i=require("./base/SpinalDrive_App_issim.js").FileExplorerCurrDirIssim;spinalDrive_Env.add_applications("FileExplorerCurrDir",new i);var r=require("./base/SpinalDrive_App_issim.js").FileExplorerIssim;spinalDrive_Env.add_applications("FileExplorer",new r)}();

},{"./base/SpinalDrive_App_issim.js":7}],14:[function(require,module,exports){
"use strict";!function(){var r=require("./base/SpinalDrive_app_newFolder.js").FolderExplorerNewFolder;spinalDrive_Env.add_applications("FolderExplorer",new r);var e=require("./base/SpinalDrive_app_newFolder.js").FileExplorerCurrDirNewFolder;spinalDrive_Env.add_applications("FileExplorerCurrDir",new e)}();

},{"./base/SpinalDrive_app_newFolder.js":9}],15:[function(require,module,exports){
"use strict";!function(){var e=require("./base/SpinalDrive_app_renameFile.js").FileExplorerRename;spinalDrive_Env.add_applications("FileExplorer",new e)}();

},{"./base/SpinalDrive_app_renameFile.js":10}],16:[function(require,module,exports){
"use strict";!function(){var e=require("./base/SpinalDrive_App_share").FileExplorerShare;spinalDrive_Env.add_applications("FileExplorer",new e);var r=require("./base/SpinalDrive_App_share").FolderExplorerShare;spinalDrive_Env.add_applications("FolderExplorer",new r);var a=require("./base/SpinalDrive_App_share").InspectorShare;spinalDrive_Env.add_applications("Inspector",new a)}();

},{"./base/SpinalDrive_App_share":8}],17:[function(require,module,exports){
(function(e){"use strict";var r=function(){function e(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(r,t,o){return t&&e(r.prototype,t),o&&e(r,o),r}}();function t(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function o(e,r){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!r||"object"!=typeof r&&"function"!=typeof r?e:r}function n(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function, not "+typeof r);e.prototype=Object.create(r&&r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r&&(Object.setPrototypeOf?Object.setPrototypeOf(e,r):e.__proto__=r)}var i=function(e){function i(){t(this,i);var e=o(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"exportSvfFileExplorer","Create BIM Project",6,"dvr","Create BIM Project"));return e.order_priority=5,e}return n(i,SpinalDrive_App),r(i,[{key:"action",value:function(e){var r=e.scope.injector.get("$mdToast");if(e&&e.file&&e.file.name){var t='Starting to Export  "'+e.file.name+'" to svf';r.showSimple(t);var o=e.file.name.replace(/\.[^/.]+$/,"");console.log(o),console.log(e);var n=e.scope.curr_dir;if(n){for(var i=o.replace(/\([\d]*\)/g,""),l=0;n.has(o);)o=i+"("+l+")",l++;var a=FileSystem._objects[e.file._server_id];a&&(console.log(a),a.load(function(r){console.log(r);var t=/(?:\.([^.]+))?$/.exec(e.file.name)[1];n.add_file(o,0,{model_type:"BIM Project",rvt:new Ptr(r),ext:t})}))}}}},{key:"is_shown",value:function(e){if(e&&e.file&&e.file._server_id){var r=FileSystem._objects[e.file._server_id];if(r&&r instanceof File&&r._info.model_type&&"Path"===r._info.model_type.get())for(var t=/(?:\.([^.]+))?$/.exec(r.name.get())[1],o=["rvt","dwg","ifc"],n=0;n<o.length;n++)if(t===o[n])return!0}return!1}}]),i}();module.exports.FileExplorerExportSvf=i,e._createClass=r,e._classCallCheck=t,e._possibleConstructorReturn=o,e._inherits=n,e.SpinalDrive_App_FileExplorer_export_svf=i}).call(window,window);

},{}],18:[function(require,module,exports){
(function(e){"use strict";var t=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(i){function l(){r(this,l);var e=n(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,"OpenSvfFileExplorer","Open with BIM Viewer",6,"location_city","Open the BIM Viewer"));return e.order_priority=5,e}return o(l,SpinalDrive_App),t(l,[{key:"action",value:function(t){for(var r=t.scope.injector.get("authService"),n=t.scope.fs_path,o="/__users__/"+r.get_user().username,i=1;i<n.length;i++)o+="/"+n[i].name;o+="/"+t.file.name;var l=e.open("",""),a="/html/viewer-annotations/index.html#!/viewer/"+btoa(o);l.document.location=a,l.focus()}},{key:"is_shown",value:function(e){if(e&&e.file&&e.file._server_id){var t=FileSystem._objects[e.file._server_id];if(t&&t instanceof File&&t._info.model_type&&"BIM Project"===t._info.model_type.get())return!0}return!1}}]),l}();module.exports.FileExplorerSvfViewer=i,e._createClass=t,e._classCallCheck=r,e._possibleConstructorReturn=n,e._inherits=o,e.SpinalDrive_App_FileExplorer_svf_viewer=i}).call(window,window);

},{}],19:[function(require,module,exports){
"use strict";!function(){var i=require("./ExportSvf/SpinalDrive_App_export_svf.js").FileExplorerExportSvf;spinalDrive_Env.add_applications("FileExplorer",new i),spinalDrive_Env.context_file_exp_app_icon["BIM Project"]="location_city"}();

},{"./ExportSvf/SpinalDrive_App_export_svf.js":17}],20:[function(require,module,exports){
"use strict";!function(){var r=require("./ExportSvf/SpinalDrive_App_svf_viewer.js").FileExplorerSvfViewer;spinalDrive_Env.add_applications("FileExplorer",new r);var e=require("./ExportSvf/SpinalDrive_App_export_svf.js").FileExplorerExportSvf;spinalDrive_Env.add_applications("FileExplorer",new e)}();

},{"./ExportSvf/SpinalDrive_App_export_svf.js":17,"./ExportSvf/SpinalDrive_App_svf_viewer.js":18}]},{},[4,11,12,13,14,15,16,19,20])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

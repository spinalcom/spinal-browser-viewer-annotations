
// Generated by CoffeeScript 1.11.1
var BuildAdminFileSystem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BuildAdminFileSystem = (function(superClass) {
  extend(BuildAdminFileSystem, superClass);

  function BuildAdminFileSystem(directory, data1, list, process_list, run_init) {
    this.data = data1;
    this.list = list;
    this.process_list = process_list;
    if (run_init == null) {
      run_init = false;
    }
    this.builData = bind(this.builData, this);
    this.init = bind(this.init, this);
    this.add_binded_process = bind(this.add_binded_process, this);
    this.add_item_to_list = bind(this.add_item_to_list, this);
    this.onchange = bind(this.onchange, this);
    BuildAdminFileSystem.__super__.constructor.call(this, directory);
    this.directory = directory;
    this.nb_iter = 0;
    this.uper_list = [];
    this.change = false;
    if (run_init) {
      this.builData(this.directory, this.list[0], 0);
    }
  }

  BuildAdminFileSystem.prototype.onchange = function() {
    if (this.directory.has_been_modified() && this.change) {
      this.builData(this.directory, this.data, 0);
    }
    return this.change = true;
  };

  BuildAdminFileSystem.prototype.add_item_to_list = function(data) {
    var d, k, len, ref;
    ref = this.list;
    for (k = 0, len = ref.length; k < len; k++) {
      d = ref[k];
      if (d.id.get() === data.id.get()) {
        return;
      }
    }
    return this.list.push(data);
  };

  BuildAdminFileSystem.prototype.add_binded_process = function(model, data) {
    var k, len, p, ref;
    ref = this.process_list;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.directory.model_id === model.model_id) {
        return;
      }
    }
    if (model.model_id === this.directory.model_id) {
      return;
    }
    return this.process_list.push(new BuildAdminFileSystem(model, data, this.list, this.process_list, false));
  };

  BuildAdminFileSystem.prototype.init = function() {
    return this.data.children.clear();
  };

  BuildAdminFileSystem.prototype.find_data = function(child, data_) {
    var d, i, k, ref;
    for (i = k = 0, ref = data_.children.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      d = data_.children[i];
      if (Number(d.id.get()) === child.model_id) {
        return i;
      }
    }
    return -1;
  };

  BuildAdminFileSystem.prototype.getName = function(model) {
    var _info, percent, ref, ref1, res;
    res = model.name.get();
    if ((model != null ? (ref = model._info) != null ? (ref1 = ref.model_type) != null ? ref1.get() : void 0 : void 0 : void 0) === "Path") {
      _info = model._info;
      if (_info.remaining.get() !== 0) {
        percent = (_info.to_upload.get() - _info.remaining.get()) / _info.to_upload.get();
        res += " (" + (percent.toFixed(2)) + "%)";
      }
    }
    return res;
  };

  BuildAdminFileSystem.prototype.builData = function(m, data_, index) {
    var _ref, child, d, exist, i, item, j, k, l, length, num, ref, ref1, ref2, test;
    _ref = this;
    data_.directory_id.set(m.model_id);
    this.add_item_to_list(data_);
    this.add_binded_process(m, data_);
    i = 0;
    while (i < data_.children.length) {
      d = data_.children[i];
      exist = false;
      for (j = k = 0, ref = m.length; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {
        child = m[j];
        if (Number(d.id.get()) === child.model_id) {
          exist = true;
          break;
        }
      }
      if (!exist) {
        data_.children.remove(d);
        i = 0;
      } else {
        i++;
      }
    }
    if (m.length !== 0) {
      for (i = l = ref1 = index, ref2 = m.length; ref1 <= ref2 ? l < ref2 : l > ref2; i = ref1 <= ref2 ? ++l : --l) {
        if (m[i] != null) {
          child = m[i];
          if (child instanceof Val || child.name instanceof Val) {
            continue;
          }
          num = this.find_data(child, data_);
          if (num !== -1) {
            item = data_.children[num];
            item.text.set(this.getName(child));
          } else {
            item = new AdminTreeItem;
            data_.children.push(item);
            item.id.set(child.model_id);
            item.text.set(this.getName(child));
            item.link_model = child;
            if (child._info.model_type.get() === "Directory") {
              item.type.set("directory");
              item.state.opened.set(true);
              item.state.disabled.set(false);
              child._ptr.load(function(dir) {
                return _ref.builData(dir, item, 0);
              });
              this.uper_list.push({
                "model": m,
                "data": data_,
                "index": i + 1
              });
              return;
            } else if (child._info.model_type.get() === "Path") {
              item.type.set("path");
              item.state.opened.set(false);
              item.state.disabled.set(true);
            } else if (child._info.model_type.get() === "Session") {
              item.type.set("session");
              item.state.opened.set(false);
              item.state.disabled.set(true);
            } else {
              item.type.set("file");
              item.state.opened.set(false);
              item.state.disabled.set(true);
            }
          }
        }
        this.nb_iter += 1;
      }
    }
    length = this.uper_list.length;
    if (this.uper_list.length > 0) {
      test = this.uper_list.pop();
      return this.builData(test["model"], test["data"], test["index"]);
    }
  };

  return BuildAdminFileSystem;

})(Process);
// Generated by CoffeeScript 1.11.1
var launch_spinal_admin;

launch_spinal_admin = function() {
  var MnM, folder_list, process_list, root_dir, selected_data;
  root_dir = new AdminTreeItem;
  root_dir.id.set(0);
  root_dir.text.set("root");
  root_dir.type.set("directory");
  root_dir.state.opened.set(true);
  folder_list = new Lst;
  folder_list.push(root_dir);
  process_list = [];
  selected_data = new Lst;
  MnM = new Modals_and_Menu(selected_data, folder_list);
  return conn.load_or_make_dir("/", function(dir, err) {
    var VFS, VSD;
    process_list.push(new BuildAdminFileSystem(dir, root_dir, folder_list, process_list, true));
    VFS = new ViewAdminFileSystem(root_dir, selected_data, MnM);
    VSD = new ViewSelectedData(selected_data);
    spinalCore.load(conn, "/etc/Status", function(MS) {
      var VSH;
      return VSH = new ViewStatsHub(MS);
    });
    spinalCore.load(conn, "/etc/users", function(user) {
      var UMP;
      return UMP = new UserMnagerPanel(user);
    });
    return new ViewAppModule();
  });
};
// Generated by CoffeeScript 1.11.1
var Modals_and_Menu, mnm,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

mnm = {};

Modals_and_Menu = (function() {
  function Modals_and_Menu(selected_data, folder_list) {
    this.selected_data = selected_data;
    this.folder_list = folder_list;
    this.getModel_by_model_id = bind(this.getModel_by_model_id, this);
    this.open_session = bind(this.open_session, this);
    this.get_name_by_id = bind(this.get_name_by_id, this);
    this.download_file = bind(this.download_file, this);
    this._deleteItem = bind(this._deleteItem, this);
    mnm = this;
    this.modal_share = new Modal_Share;
    this.modal_new = new Modal_New;
    this.customMenu = (function(_this) {
      return function(node) {
        var items, ref, ref1, selected, selected_type;
        selected = _this.getModel_by_model_id(_this.selected_data);
        selected_type = selected != null ? (ref = selected._info) != null ? (ref1 = ref.model_type) != null ? ref1.get() : void 0 : void 0 : void 0;
        items = {};
        switch (selected_type) {
          case "Session":
            items.openSession = {
              separator_before: false,
              separator_after: true,
              icon: 'fa fa-desktop text-success',
              label: "Open Session",
              action: function() {
                return mnm.open_session(node);
              }
            };
            break;
          case "Path":
            items.openSession = {
              separator_before: false,
              separator_after: true,
              icon: 'fa fa-download text-success',
              label: "Download",
              action: function() {
                return mnm.download_file();
              }
            };
        }
        items.NewItem = {
          separator_before: false,
          separator_after: false,
          icon: 'fa fa-file text-warning',
          label: "New...",
          action: function() {
            return mnm.modal_new._newItem();
          }
        };
        items.shareItem = {
          icon: 'fa fa-share text-success',
          separator_before: false,
          separator_after: false,
          label: "Share",
          action: function() {
            return mnm.modal_share._shareItem(mnm.getModel_by_model_id(mnm.selected_data));
          }
        };
        items.deleteItem = {
          separator_before: true,
          separator_after: false,
          icon: 'fa fa-trash text-danger',
          label: "Delete",
          action: function() {
            return mnm._deleteItem();
          }
        };
        return items;
      };
    })(this);
  }

  Modals_and_Menu.prototype._deleteItem = function() {
    var ref, selected;
    selected = this.getModel_by_model_id(this.selected_data);
    if (((ref = selected._parents) != null ? ref.length : void 0) !== 0) {
      return selected._parents[0].remove(selected);
    }
  };

  Modals_and_Menu.prototype.download_file = function() {
    var selected;
    selected = this.getModel_by_model_id(this.selected_data);
    if (selected instanceof TiffFile) {
      return selected.load_tiff(function(model, err) {
        if ((typeof Path !== "undefined" && Path !== null) && (model instanceof Path)) {
          return window.open("/sceen/_?u=" + model._server_id, "_blank");
        }
      });
    } else {
      return selected.load(function(model, err) {
        if ((typeof Path !== "undefined" && Path !== null) && (model instanceof Path)) {
          return window.open("/sceen/_?u=" + model._server_id, "_blank");
        }
      });
    }
  };

  Modals_and_Menu.prototype.get_name_by_id = function(id) {
    var i, len, obj, ref;
    ref = this.folder_list;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      if (obj.id.get() === id) {
        return obj.text.get();
      }
    }
    return "";
  };

  Modals_and_Menu.prototype.open_session = function(node) {
    var Projects_dir, i, len, myWindow, obj, ref;
    Projects_dir = node.text;
    ref = node.parents;
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      if (obj === "#") {
        Projects_dir = '/' + Projects_dir;
        break;
      } else {
        Projects_dir = this.get_name_by_id(parseInt(obj)) + "/" + Projects_dir;
      }
    }
    myWindow = window.open('', '');
    myWindow.document.location = "/html/lab.html#" + encodeURI(Projects_dir);
    return myWindow.focus();
  };

  Modals_and_Menu.prototype.getModel_by_model_id = function(selectedID) {
    var k, m, ref;
    this.selectedID = selectedID;
    ref = FileSystem._objects;
    for (k in ref) {
      m = ref[k];
      if (parseInt(m.model_id) === parseInt(this.selectedID)) {
        return m;
      }
    }
  };

  return Modals_and_Menu;

})();
// Generated by CoffeeScript 1.11.1
var Modal_New,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Modal_New = (function() {
  function Modal_New() {
    this.handle_files = bind(this.handle_files, this);
    this.clear_refresh_upload = bind(this.clear_refresh_upload, this);
    this.validate = bind(this.validate, this);
    this.validate_Project = bind(this.validate_Project, this);
    this.validate_Folder = bind(this.validate_Folder, this);
    this.clickOnUpload = bind(this.clickOnUpload, this);
    this.clickOnProject = bind(this.clickOnProject, this);
    this.clickOnFolder = bind(this.clickOnFolder, this);
    this._newItem = bind(this._newItem, this);
    var _this;
    _this = this;
    this.folder = $("#modal-new-head-folder");
    this.project = $("#modal-new-head-project");
    this.upload = $("#modal-new-head-upload");
    this.folder.click(function() {
      return _this.clickOnFolder();
    });
    this.project.click(function() {
      return _this.clickOnProject();
    });
    this.upload.click(function() {
      return _this.clickOnUpload();
    });
    this.content = $('#modal-new-content');
    this.flag = 0;
    $('#modal-new-content').on('hidden.bs.modal', this.modal_closed);
  }

  Modal_New.prototype.modal_closed = function() {
    return mnm.modal_new.clear_refresh_upload(mnm.modal_new);
  };

  Modal_New.prototype._newItem = function() {
    var _this, ref, ref1, ref2;
    this.data = mnm.getModel_by_model_id(mnm.selected_data);
    this.interval = 0;
    _this = this;
    if (((ref = this.data._info) != null ? (ref1 = ref.model_type) != null ? ref1.get() : void 0 : void 0) === "Directory") {
      $("#page-container").spin('large');
      return this.data.load(function(m) {
        $("#page-container").spin(false);
        _this.data = m;
        $('#modal-new').modal();
        return _this.clickOnFolder();
      });
    } else {
      this.data = (ref2 = this.data._parents) != null ? ref2[0] : void 0;
      $('#modal-new').modal();
      return this.clickOnFolder();
    }
  };

  Modal_New.prototype.clickOnFolder = function() {
    var res;
    this.flag = 1;
    this.folder.addClass("active");
    this.project.removeClass("active");
    this.upload.removeClass("active");
    res = "<h5>New Folder Name:</h5>";
    res += "<input type=\"text\" onfocus=\"this.select()\" " + " class=\"form-control\" id=\"modal-new-name\" value=\"New Folder\">";
    this.content.html(res);
    return $("#modal-new-name").focus();
  };

  Modal_New.prototype.clickOnProject = function() {
    var date, res;
    this.flag = 2;
    this.folder.removeClass("active");
    this.project.addClass("active");
    this.upload.removeClass("active");
    date = new Date;
    res = "<h5>New Project Session Name:</h5>";
    res += "<input type=\"text\" onfocus=\"this.select()\" class=\"form-control\" " + (" id=\"modal-new-name\" value=\"Project name - " + (date.toString()) + "\">");
    this.content.html(res);
    return $("#modal-new-name").focus();
  };

  Modal_New.prototype.clickOnUpload = function() {
    var _this, file_container, input;
    this.flag = 3;
    this.folder.removeClass("active");
    this.project.removeClass("active");
    this.upload.addClass("active");
    this.content.html("");
    this.uploaded_file = [];
    _this = this;
    input = new_dom_element({
      parentNode: this.content.get(0),
      nodeName: "input",
      type: "file",
      id: "modal-new-dropzone-input",
      multiple: "true",
      className: "modal-new-dropzone-input",
      onchange: function(evt) {
        return _this.handle_files(input.files);
      }
    });
    file_container = new_dom_element({
      parentNode: this.content.get(0),
      nodeName: "label",
      innerHTML: "<span class=\"modal-new-span-upload\" >click to Choose files to upload " + "or Drop them here</span><ul id=\"modal-new-list-upload\"></ul>",
      className: "text-center",
      ondrop: function(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        return _this.handle_files(evt.dataTransfer.files);
      },
      ondragover: function(evt) {
        return evt.preventDefault();
      }
    });
    return file_container.htmlFor = "modal-new-dropzone-input";
  };

  Modal_New.prototype.validate_Folder = function() {
    var name;
    name = $("#modal-new-name").val();
    return this.data.add_file(name, new Directory);
  };

  Modal_New.prototype.validate_Project = function() {
    var date, name;
    date = new Date();
    name = $("#modal-new-name").val();
    return this.data.add_file(name, 0, {
      model_type: 'Session',
      icon: 'Session'
    });
  };

  Modal_New.prototype.validate = function() {
    switch (this.flag) {
      case 1:
        this.validate_Folder();
        break;
      case 2:
        this.validate_Project();
        break;
      case 3:
        this.clear_refresh_upload();
    }
    return $('#modal-new').modal('hide');
  };

  Modal_New.prototype.clear_refresh_upload = function(inst) {
    if (inst == null) {
      inst = this;
    }
    if (inst.interval) {
      clearInterval(inst.interval);
      return inst.interval = 0;
    }
  };

  Modal_New.prototype.update_upload_list = function() {
    var _info, file, i, in_process, len, list, percent, ref, res;
    if (!mnm.modal_new.interval) {
      mnm.modal_new.interval = setInterval(mnm.modal_new.update_upload_list, 1000);
    }
    if (mnm.modal_new.uploaded_file.length !== 0) {
      list = $("#modal-new-list-upload");
      in_process = false;
      res = "";
      ref = mnm.modal_new.uploaded_file;
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        _info = {};
        file.mod.get_file_info(_info);
        if (_info.remaining.get() === 0) {
          percent = 100;
        } else {
          percent = (_info.to_upload.get() - _info.remaining.get()) / _info.to_upload.get();
          in_process = true;
        }
        res += "<li>" + file.file.name + " (" + (percent.toFixed(2)) + "%)</li>";
      }
      list.html(res);
      if (in_process === false) {
        return mnm.modal_new.clear_refresh_upload(mnm.modal_new);
      }
    }
  };

  Modal_New.prototype.handle_files = function(files) {
    var file, filePath, i, len, mod_file, results;
    if (files.length > 0) {
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        filePath = new Path(file);
        mod_file = this.data.force_add_file(file.name, filePath);
        this.uploaded_file.push({
          file: mod_file,
          mod: filePath
        });
        results.push(this.update_upload_list());
      }
      return results;
    }
  };

  return Modal_New;

})();
// Generated by CoffeeScript 1.11.1
var Modal_Share,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Modal_Share = (function() {
  function Modal_Share() {
    this.send_share = bind(this.send_share, this);
    this._shareItem = bind(this._shareItem, this);
    this.create_rightsItem_tab = bind(this.create_rightsItem_tab, this);
    var _this;
    this.flag = 0;
    _this = this;
    $('#modal-share-read').on('change', function() {
      if ($(this).prop('checked')) {
        return mnm.modal_share.flag |= spinalCore.right_flag.RD;
      } else {
        return mnm.modal_share.flag &= ~spinalCore.right_flag.RD;
      }
    });
    $('#modal-share-write').on('change', function() {
      if ($(this).prop('checked')) {
        return mnm.modal_share.flag |= spinalCore.right_flag.WR;
      } else {
        return mnm.modal_share.flag &= ~spinalCore.right_flag.WR;
      }
    });
    $('#modal-share-share').on('change', function() {
      if ($(this).prop('checked')) {
        return mnm.modal_share.flag |= spinalCore.right_flag.AD;
      } else {
        return mnm.modal_share.flag &= ~spinalCore.right_flag.AD;
      }
    });
    $('#modal-share').on('shown.bs.modal', function() {
      return $('#modal-share-target').focus();
    });
  }

  Modal_Share.prototype.create_right_col = function(flag, flagType) {
    if (flag & flagType) {
      return "<td>Yes</td>";
    }
    return "<td>No</td>";
  };

  Modal_Share.prototype.create_rightsItem_tab = function(ptr, data) {
    var i, len, res, tab, ur;
    tab = document.getElementById('modal-share-rightsItem');
    res = "";
    for (i = 0, len = data.length; i < len; i++) {
      ur = data[i];
      res += "<tr>";
      res += "<td>" + ur.user.id.get() + "</td>";
      res += "<td>" + ur.user.name.get() + "</td>";
      res += mnm.modal_share.create_right_col(ur.flag.get(), spinalCore.right_flag.RD);
      res += mnm.modal_share.create_right_col(ur.flag.get(), spinalCore.right_flag.WR);
      res += mnm.modal_share.create_right_col(ur.flag.get(), spinalCore.right_flag.AD);
      res += "</tr>";
      this.namelist.push(ur.user.name.get());
    }
    return tab.innerHTML = res;
  };

  Modal_Share.prototype._shareItem = function(mod) {
    var _data, file_name;
    this.mod = mod;
    this.namelist = [];
    $('#modal-share-read').prop('checked', false);
    $('#modal-share-write').prop('checked', false);
    $('#modal-share-share').prop('checked', false);
    document.getElementById('modal-share-target').value = "";
    $("#modal-share-target").autocomplete({
      minLength: 0,
      position: {
        my: "right top",
        at: "right bottom"
      },
      source: mnm.modal_share.namelist
    });
    file_name = document.getElementById('modal-share-file');
    if (this.mod.name) {
      file_name.value = this.mod.name;
    } else {
      file_name.value = this.mod.constructor.name;
    }
    this.flag = 0;
    if (this.mod instanceof File) {
      _data = this.mod._ptr.data.value;
    } else {
      _data = this.mod._server_id;
    }
    spinalCore.load_right(conn, _data, function(res) {
      return mnm.modal_share.create_rightsItem_tab(_data, res);
    }, function(err) {
      return console.log("Error load_right");
    });
    return $('#modal-share').modal();
  };

  Modal_Share.prototype.send_share = function() {
    var _error, data, error, file, flag, found_error, user;
    user = document.getElementById('modal-share-target').value;
    file = document.getElementById('modal-share-file').value;
    flag = mnm.modal_share.flag;
    data = this.mod;
    error = document.getElementById('modal-share-error');
    error.innerHTML = "";
    _error = "Error ";
    found_error = false;
    if (user === "") {
      if (found_error === false) {
        found_error = true;
      }
      _error += "invalid target username";
    }
    if (file === "") {
      if (found_error === false) {
        found_error = true;
      } else {
        _error += ", ";
      }
      _error += "invalid filename";
    }
    if (flag === 0) {
      if (found_error === false) {
        found_error = true;
      } else {
        _error += ", ";
      }
      _error += "add Right Types to give";
    }
    if (found_error === true) {
      error.innerHTML = _error + '.';
      return;
    }
    spinalCore.share_model(conn, data, file, flag, user);
    return $('#modal-share').modal('hide');
  };

  return Modal_Share;

})();
// Generated by CoffeeScript 1.11.1
var ViewAdminFileSystem,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewAdminFileSystem = (function(superClass) {
  extend(ViewAdminFileSystem, superClass);

  function ViewAdminFileSystem(data, SelectedData, MnM) {
    this.SelectedData = SelectedData;
    this.tojson = bind(this.tojson, this);
    this.onchange = bind(this.onchange, this);
    ViewAdminFileSystem.__super__.constructor.call(this, data);
    this.data = data;
    $('#jstree2-ajax').jstree({
      "contextmenu": {
        "items": MnM.customMenu
      },
      "core": {
        "themes": {
          "responsive": false
        },
        "check_callback": true,
        'data': this.tojson(this.data)
      },
      "types": {
        "default": {
          "icon": "fa fa-folder text-warning fa-lg"
        },
        "directory": {
          "icon": "fa fa-folder text-warning fa-lg"
        },
        "file": {
          "icon": "fa fa-file text-warning fa-lg"
        },
        "session": {
          "icon": "fa fa-desktop text-success fa-lg"
        },
        "path": {
          "icon": "fa fa-download text-success fa-lg"
        }
      },
      "plugins": ["contextmenu", "state", "types"]
    });
  }

  ViewAdminFileSystem.prototype.onchange = function() {
    var _data, _selected_data, new_data;
    if (this.data.has_been_modified()) {
      new_data = this.tojson(this.data, 0);
      $('#jstree2-ajax').jstree(true).settings.core.data = new_data;
      $('#jstree2-ajax').jstree(true).refresh();
      $('#jstree2-ajax').jstree('open_all');
      _selected_data = this.SelectedData;
      _data = this.data;
      return $("#jstree2-ajax").bind('changed.jstree', function(evt, data) {
        var i, j, r, ref, test;
        _selected_data.clear();
        test = -1;
        r = [];
        for (i = j = 0, ref = data.selected.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          r.push(data.instance.get_node(data.selected[i]).id);
        }
        return _selected_data.push(r[0]);
      });
    }
  };

  ViewAdminFileSystem.prototype.tojson = function(_data, level) {
    var child, j, len, ref, tree_data;
    tree_data = [];
    ref = _data.children;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      tree_data.push({
        "id": child.id.get(),
        "text": child.text.get(),
        "state": this.get_state(child),
        "type": this.get_type(child, level),
        "children": child.children.length !== 0 ? this.tojson(child, 1) : []
      });
    }
    return tree_data;
  };

  ViewAdminFileSystem.prototype.get_type = function(_data, level) {
    var type;
    type = _data.type.get();
    return type;
  };

  ViewAdminFileSystem.prototype.get_state = function(_data) {
    var state;
    state = {};
    if (_data.type.get() === "file") {
      state = {
        "opened": false
      };
    } else {
      state = {
        "opened": true
      };
    }
    return state;
  };

  return ViewAdminFileSystem;

})(Process);
// Generated by CoffeeScript 1.11.1
var usermanager_view;

usermanager_view = {
  add: function() {
    var password, user;
    user = document.getElementById("input_user").value;
    password = document.getElementById("input_password").value;
    if (user === "" || password === "") {
      return false;
    }
    return SpinalUserManager.new_account("http://" + config.host + ":" + config.port + "/", user, password, function(response) {
      return $.gritter.add({
        title: 'Notification',
        text: 'Success create new account.'
      });
    }, function(err) {
      $.gritter.add({
        title: 'Notification',
        text: 'Error create new account.'
      });
      return console.log("Error create new account");
    });
  }
};
// Generated by CoffeeScript 1.11.1
var UserMnagerPanel, _userMnagerPanel,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_userMnagerPanel = {};

UserMnagerPanel = (function(superClass) {
  extend(UserMnagerPanel, superClass);

  function UserMnagerPanel(model) {
    this.make_table = bind(this.make_table, this);
    this.onchange = bind(this.onchange, this);
    UserMnagerPanel.__super__.constructor.call(this, model);
    this.model = model;
    this.el_list = document.getElementById("user_list");
    _userMnagerPanel = this;
  }

  UserMnagerPanel.prototype.onchange = function() {
    if (this.model.has_been_modified()) {
      return this.make_table();
    }
  };

  UserMnagerPanel.prototype.make_table = function() {
    var data, i, len, ref, user;
    data = "";
    ref = this.model;
    for (i = 0, len = ref.length; i < len; i++) {
      user = ref[i];
      data += "<tr> <td style=\"padding:10px 0px;\"> <i class=\"fa fa-trash-o\" onclick=\"_userMnagerPanel.delete_account(\'" + user.name.get() + ("\')\" ></i> </td> <td scope=\"row\">" + (user.id.get()) + "</td> <td>" + (user.name.get()) + "</td> <td>" + (user.home.get()) + "</td> </tr>");
    }
    return this.el_list.innerHTML = data;
  };

  UserMnagerPanel.prototype.delete_account = function(user_id) {
    return SpinalUserManager.delete_account_by_admin("http://" + config.host + ":" + config.port + "/", user_id, config.user_id, config.password, function(response) {
      return $.gritter.add({
        title: 'Success',
        text: "User " + user_id + " deleted."
      });
    }, function(err) {
      return $.gritter.add({
        title: 'Error',
        text: "An error happend when trying to delete the User " + user_id + "."
      });
    });
  };

  return UserMnagerPanel;

})(Process);
// Generated by CoffeeScript 1.11.1
var _index_current_popup, add_class, get_left, get_top, new_dom_element, new_popup, rem_class,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

new_dom_element = function(params, nodeName) {
  var k, n, name, v, val;
  if (params == null) {
    params = {};
  }
  if (nodeName == null) {
    nodeName = "div";
  }
  n = document.createElement(params.nodeName || nodeName);
  for (name in params) {
    val = params[name];
    switch (name) {
      case "parentNode":
        val.appendChild(n);
        break;
      case "nodeName":
        void 0;
        break;
      case "style":
        for (k in val) {
          v = val[k];
          n.style[k] = v;
        }
        break;
      case "txt":
        n.innerHTML = val;
        break;
      default:
        n[name] = val;
    }
  }
  return n;
};

add_class = function(obj, src) {
  var old, p_1;
  if (typeof src === "string") {
    return add_class(obj, src.split(" "));
  }
  old = (obj.className || "").split(" ");
  p_1 = src.filter(function(x) {
    return indexOf.call(old, x) < 0;
  });
  return obj.className = (old.concat(p_1)).filter(function(x) {
    return x;
  }).join(" ");
};

rem_class = function(obj, src) {
  var old;
  if (typeof src === "string") {
    return rem_class(obj, src.split(" "));
  }
  old = (obj.className || "").split(" ");
  return obj.className = (old.filter(function(x) {
    return indexOf.call(src, x) < 0;
  })).join(" ");
};

get_left = function(l) {
  if (l.offsetParent != null) {
    return l.offsetLeft + get_left(l.offsetParent);
  } else {
    return l.offsetLeft;
  }
};

get_top = function(l) {
  if (l.offsetParent != null) {
    return l.offsetTop + get_top(l.offsetParent);
  } else {
    return l.offsetTop;
  }
};

_index_current_popup = 100;

new_popup = function(title, params) {
  var _drag_end_func, _drag_evt_func, b, clientX, clientY, close_element, extention, height, old_x, old_y, repos, res, t, top_x, top_y, w, width;
  if (params == null) {
    params = {};
  }
  if (params.popup_closer == null) {
    b = new_dom_element({
      parentNode: document.body,
      id: "popup_closer",
      onmousedown: function() {
        if (typeof params.onclose === "function") {
          params.onclose();
        }
        document.body.removeChild(b);
        return document.body.removeChild(w);
      },
      ondrop: function(evt) {
        if (!evt) {
          evt = window.event;
        }
        evt.cancelBubble = true;
        if (typeof evt.stopPropagation === "function") {
          evt.stopPropagation();
        }
        if (typeof evt.preventDefault === "function") {
          evt.preventDefault();
        }
        if (typeof evt.stopImmediatePropagation === "function") {
          evt.stopImmediatePropagation();
        }
        return false;
      },
      style: {
        position: "fixed",
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        background: params.fixed_opacity || "#000",
        opacity: params.fixed_opacity || 0,
        zIndex: _index_current_popup
      }
    });
  }
  if ((params.event != null) && params.event.clientX) {
    clientX = params.event.clientX;
    clientY = params.event.clientY;
  } else {
    clientX = window.innerWidth / 2 - 10;
    clientY = window.innerHeight / 2 - 10;
  }
  top_x = params.top_x || -1000;
  top_y = params.top_y || -1000;
  old_x = 0;
  old_y = 0;
  w = void 0;
  if (params.width != null) {
    width = params.width;
  }
  if (params.height != null) {
    height = params.height;
  }
  repos = function() {
    top_x = clientX - w.clientWidth / 2;
    top_y = clientY - w.clientHeight / 2;
    if ((top_x + w.clientWidth) > window.innerWidth) {
      top_x = window.innerWidth - w.clientWidth - 50;
    }
    if ((top_y + w.clientHeight) > window.innerHeight) {
      top_y = window.innerHeight - w.clientHeight + 50;
    }
    if (top_x < 50) {
      top_x = 50;
    }
    if (top_y < 50) {
      top_y = 50;
    }
    w.style.left = top_x;
    return w.style.top = top_y;
  };
  _drag_evt_func = function(evt) {
    top_x += evt.clientX - old_x;
    top_y += evt.clientY - old_y;
    w.style.left = top_x;
    w.style.top = top_y;
    old_x = evt.clientX;
    old_y = evt.clientY;
    return typeof evt.preventDefault === "function" ? evt.preventDefault() : void 0;
  };
  _drag_end_func = function(evt) {
    if (typeof document.detachEvent === "function") {
      document.detachEvent("onmousemove", _drag_evt_func);
    }
    if (typeof document.detachEvent === "function") {
      document.detachEvent("onmouseup", _drag_end_func);
    }
    if (typeof document.removeEventListener === "function") {
      document.removeEventListener("mousemove", _drag_evt_func, true);
    }
    return typeof document.removeEventListener === "function" ? document.removeEventListener("mouseup", _drag_end_func, true) : void 0;
  };
  extention = "px";
  if (!params.top_x) {
    setTimeout(repos, 1);
    extention = "%";
  }
  w = new_dom_element({
    parentNode: document.body,
    className: "Popup",
    style: {
      position: "absolute",
      left: top_x,
      top: top_y,
      width: width + extention,
      height: height + extention,
      zIndex: _index_current_popup + 1
    }
  });
  _index_current_popup += 2;
  close_element = new_dom_element({
    parentNode: w,
    className: "PopupClose",
    txt: "Close",
    onmousedown: function(evt) {
      if (typeof params.onclose === "function") {
        params.onclose();
      }
      if (b != null) {
        document.body.removeChild(b);
      }
      return document.body.removeChild(w);
    }
  });
  if (title) {
    t = new_dom_element({
      parentNode: w,
      className: "PopupTitle",
      innerHTML: title,
      onmousedown: function(evt) {
        old_x = evt.clientX;
        old_y = evt.clientY;
        top_x = parseInt(w.style.left);
        top_y = parseInt(w.style.top);
        document.addEventListener("mousemove", _drag_evt_func, true);
        document.addEventListener("mouseup", _drag_end_func, true);
        return typeof evt.preventDefault === "function" ? evt.preventDefault() : void 0;
      }
    });
  }
  res = new_dom_element({
    parentNode: w,
    className: "PopupWindow",
    style: {
      padding: "6px"
    }
  });
  if (params.child != null) {
    res.appendChild(params.child);
  }
  return res;
};
// Generated by CoffeeScript 1.11.1
var ViewStatsHub, _viewStatHub,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_viewStatHub = {};

ViewStatsHub = (function(superClass) {
  extend(ViewStatsHub, superClass);

  function ViewStatsHub(model) {
    this.getSparkline = bind(this.getSparkline, this);
    this.make_admin_model_details = bind(this.make_admin_model_details, this);
    this.onchange = bind(this.onchange, this);
    this.make_sparkline = bind(this.make_sparkline, this);
    this.bind_btn = bind(this.bind_btn, this);
    ViewStatsHub.__super__.constructor.call(this, model);
    this.model = model;
    _viewStatHub = this;
    this.model_sparkline_value = [];
    this.options = {
      height: '23px',
      width: '100%',
      fillColor: 'transparent',
      lineWidth: 2,
      spotRadius: '4',
      highlightLineColor: "#3d86f6",
      highlightSpotColor: "#3d86f6",
      lineColor: "#3d86f6",
      spotColor: false,
      minSpotColor: false,
      maxSpotColor: false,
      type: 'line'
    };
    this.bind_btn();
  }

  ViewStatsHub.prototype.bind_btn = function() {
    this.btn_clicked = {
      garbageCollector: false,
      backup: false
    };
    this.el_garbage_collector = document.getElementById("btn_garbage_collector");
    this.el_garbage_collector.onclick = function() {
      _viewStatHub.btn_clicked.garbageCollector = true;
      return _viewStatHub.model.btn.garbageCollector.set(1);
    };
    this.el_backup = document.getElementById("btn_backup");
    return this.el_backup.onclick = function() {
      _viewStatHub.btn_clicked.backup = true;
      return _viewStatHub.model.btn.backup.set(1);
    };
  };

  ViewStatsHub.prototype.make_sparkline = function() {
    this.renderSparkline(this.model_sparkline_value);
    return $(window).on('resize', function() {
      var _el;
      if (_el = $("#sparkLine_count_users")) {
        _el.empty();
      }
      if (_el = $("#sparkLine_count_models")) {
        _el.empty();
      }
      if (_el = $("#sparkLine_ram_usage_res")) {
        _el.empty();
      }
      if (_el = $("#sparkLine_ram_usage_virt")) {
        _el.empty();
      }
      return _viewStatHub.renderSparkline(_viewStatHub.model_sparkline_value);
    });
  };

  ViewStatsHub.prototype.renderSparkline = function(value) {
    var _el;
    if (_el = $("#sparkLine_count_users")) {
      _el.sparkline(value["count_users"], _viewStatHub.options);
    }
    if (_el = $("#sparkLine_count_models")) {
      _el.sparkline(value["count_models"], _viewStatHub.options);
    }
    if (_el = $("#sparkLine_count_sessions")) {
      _el.sparkline(value["count_sessions"], _viewStatHub.options);
    }
    if (_el = $("#sparkLine_ram_usage_res")) {
      _el.sparkline(value["ram_usage_res"], _viewStatHub.options);
    }
    if (_el = $("#sparkLine_ram_usage_virt")) {
      return _el.sparkline(value["ram_usage_virt"], _viewStatHub.options);
    }
  };

  ViewStatsHub.prototype.onchange = function() {
    if (this.model.has_been_modified()) {
      this.make_admin_model_details();
      this.getSparkline(this.model.data.get());
      this.make_sparkline();
      if (this.btn_clicked.garbageCollector === true && this.model.btn.garbageCollector.get() === 0) {
        this.btn_clicked.garbageCollector = false;
        $.gritter.add({
          title: 'Notification',
          text: 'GarbageCollector Done.'
        });
      }
      if (this.btn_clicked.backup === true && this.model.btn.backup.get() === 0) {
        this.btn_clicked.backup = false;
        return $.gritter.add({
          title: 'Notification',
          text: 'Backup Done.'
        });
      }
    }
  };

  ViewStatsHub.prototype.make_table_line = function(el, label, data) {
    var div, td, th, tr;
    tr = document.createElement("tr");
    el.appendChild(tr);
    th = document.createElement("th");
    th.innerHTML = label;
    tr.appendChild(th);
    td = document.createElement("td");
    td.innerHTML = data;
    tr.appendChild(td);
    td = document.createElement("td");
    tr.appendChild(td);
    div = document.createElement("div");
    div.id = "sparkLine_" + label;
    return td.appendChild(div);
  };

  ViewStatsHub.prototype.make_admin_model_details = function() {
    var el;
    el = $('#admin_details');
    el.empty();
    this.make_table_line(el[0], "count_users", this.model.count_users.get());
    this.make_table_line(el[0], "count_models", this.model.count_models.get());
    this.make_table_line(el[0], "count_sessions", this.model.count_sessions.get());
    this.make_table_line(el[0], "ram_usage_res", this.model.ram_usage_res.get());
    return this.make_table_line(el[0], "ram_usage_virt", this.model.ram_usage_virt.get());
  };

  ViewStatsHub.prototype.getSparkline = function(m) {
    this.model_sparkline_value["count_users"] = this.getSparklineData(m["count_users"]);
    this.model_sparkline_value["count_models"] = this.getSparklineData(m["count_models"]);
    this.model_sparkline_value["count_sessions"] = this.getSparklineData(m["count_sessions"]);
    this.model_sparkline_value["ram_usage_res"] = this.getSparklineData(m["ram_usage_res"]);
    return this.model_sparkline_value["ram_usage_virt"] = this.getSparklineData(m["ram_usage_virt"]);
  };

  ViewStatsHub.prototype.getSparklineData = function(str) {
    var data, i, len, res, tmp;
    res = [];
    tmp = str.split(";");
    for (i = 0, len = tmp.length; i < len; i++) {
      data = tmp[i];
      if (data !== "") {
        res.push(data);
      }
    }
    return res;
  };

  return ViewStatsHub;

})(Process);
// Generated by CoffeeScript 1.11.1
var ViewAppModule;

ViewAppModule = (function() {
  function ViewAppModule() {
    var btn, dash_lib, div, el, i, icon, len, name, obj;
    for (i = 0, len = DASHBOARD_MOD.length; i < len; i++) {
      dash_lib = DASHBOARD_MOD[i];
      obj = new window[dash_lib]();
      el = $("#app-module-list");
      div = new_dom_element({
        nodeName: 'div',
        className: 'col-xs-6 app-btn-container'
      });
      btn = new_dom_element({
        nodeName: 'button',
        nodeType: 'button',
        className: 'btn btn-primary app-btn',
        onclick: obj.action
      });
      btn.tree = obj.tree;
      icon = new_dom_element({
        nodeName: 'i',
        className: 'fa fa-plus-square'
      });
      name = new_dom_element({
        nodeName: 'div',
        innerHTML: obj.name
      });
      btn.appendChild(icon);
      btn.appendChild(name);
      div.appendChild(btn);
      el.append(div);
      console.log(obj);
    }
  }

  return ViewAppModule;

})();
// Generated by CoffeeScript 1.11.1
var ViewSelectedData,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ViewSelectedData = (function(superClass) {
  extend(ViewSelectedData, superClass);

  function ViewSelectedData(SelectedData) {
    this.getModel_by_model_id = bind(this.getModel_by_model_id, this);
    this.onchange = bind(this.onchange, this);
    ViewSelectedData.__super__.constructor.call(this, SelectedData);
    this.SelectedData = SelectedData;
    this.tree = null;
    this.tree_model = null;
  }

  ViewSelectedData.prototype.onchange = function() {
    var _this, selected_model;
    if (this.SelectedData.has_been_modified()) {
      if (this.SelectedData.length === 0) {
        return;
      }
      selected_model = this.getModel_by_model_id(this.SelectedData[0].get());
      if (!selected_model) {
        return;
      }
      if (this.tree !== null) {
        this.tree_model.unbind(this.tree);
        this.tree = null;
      }
      _this = this;
      return selected_model.load(function(modelLoaded) {
        _this.tree_model = modelLoaded;
        return _this.tree = new TreeFileSelected(modelLoaded);
      });
    }
  };

  ViewSelectedData.prototype.getModel_by_model_id = function(selectedID) {
    var k, m, ref;
    this.selectedID = selectedID;
    ref = FileSystem._objects;
    for (k in ref) {
      m = ref[k];
      if (parseInt(m.model_id) === parseInt(this.selectedID)) {
        return m;
      }
    }
  };

  return ViewSelectedData;

})(Process);
// Generated by CoffeeScript 1.11.1
var Tree_ptr,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Tree_ptr = (function(superClass) {
  extend(Tree_ptr, superClass);

  function Tree_ptr(model, parent, ptr) {
    this.parent = parent;
    this.ptr = ptr;
    this.onchange = bind(this.onchange, this);
    Tree_ptr.__super__.constructor.call(this, model);
    this.model = model;
  }

  Tree_ptr.prototype.onchange = function() {
    if (this.model.has_been_modified()) {
      return this.parent.update_ptr(this.ptr, this.model);
    }
  };

  return Tree_ptr;

})(Process);
// Generated by CoffeeScript 1.11.1
var TreeFileSelected, _Tree,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_Tree = {};

TreeFileSelected = (function(superClass) {
  extend(TreeFileSelected, superClass);

  function TreeFileSelected(model) {
    this.visit = bind(this.visit, this);
    this.update = bind(this.update, this);
    this.calc_dist_depth = bind(this.calc_dist_depth, this);
    this.centerNode = bind(this.centerNode, this);
    this.newCenterNode = bind(this.newCenterNode, this);
    this.makeTree = bind(this.makeTree, this);
    this.onchange = bind(this.onchange, this);
    TreeFileSelected.__super__.constructor.call(this, model);
    this.model = model;
    this.el = document.getElementById("file-content");
    _Tree = this;
    this.depthLength = [];
    this._id = 0;
    this.data = {};
    new SeachModelTree(this, document.getElementById("search_tree_input"), document.getElementById("search_tree_res"), document.getElementById("search_tree_prev"), document.getElementById("search_tree_next"), this.search_by_name);
    this.makeTree();
  }

  TreeFileSelected.prototype.onchange = function() {
    var root_id;
    if (this.model.has_been_modified()) {
      root_id = this.root.server_id;
      this.visit(this.root, (function(d) {
        d.used = false;
      }), function(d) {
        if (d.children && d.children.length > 0) {
          return d.children;
        } else if (d._children && d._children.length > 0) {
          return d._children;
        } else {
          return null;
        }
      });
      this.root.used = true;
      this.toJson(this, this.root, this.model);
      this.delete_not_used(this.root);
      this.visit(this.root, (function(d) {
        _Tree.maxLabelLength = Math.max(d.name.length, _Tree.maxLabelLength);
      }), function(d) {
        if (d.children && d.children.length > 0) {
          return d.children;
        } else {
          return null;
        }
      });
      this.update(this.root);
      if (root_id !== this.root.server_id) {
        return this.newCenterNode(this.root);
      }
    }
  };

  TreeFileSelected.prototype.search_by_name = function(search_handler, data) {
    var re, search_res;
    search_res = [];
    re = new RegExp(".*" + data, 'i');
    _Tree.visit(_Tree.root, (function(d) {
      if (d.name.search(re) !== -1) {
        search_res.push(d);
      }
    }), function(d) {
      if (d.children && d.children.length > 0) {
        return d.children;
      } else {
        return null;
      }
    });
    return search_handler.set_result(search_res);
  };

  TreeFileSelected.prototype.update_ptr = function(ptr, mod) {
    var child, children;
    _Tree.visit(ptr, (function(d) {
      d.used = false;
    }), function(d) {
      if (d.children && d.children.length > 0) {
        return d.children;
      } else if (d._children && d._children.length > 0) {
        return d._children;
      } else {
        return null;
      }
    });
    ptr.used = true;
    if (ptr.children) {
      children = ptr.children;
    }
    if (ptr._children) {
      children = ptr._children;
    }
    if (!(children instanceof Array)) {
      ptr.children = [];
      children = ptr.children;
    }
    child = _Tree.search_child(children, mod._server_id);
    if (child) {
      _Tree.toJson(_Tree, child, mod);
    } else {
      children.push({
        name: ""
      });
      _Tree.toJson(_Tree, children[children.length - 1], mod);
    }
    _Tree.delete_not_used(ptr);
    _Tree.update(ptr);
    return _Tree.newCenterNode(ptr);
  };

  TreeFileSelected.prototype.delete_not_used = function(source) {
    return _Tree.visit(source, (function(d) {
      if (d.used === false) {
        _Tree.remove_node(d.parent, d);
      }
    }), function(d) {
      if (d.children && d.children.length > 0) {
        return d.children;
      }
      if (d._children && d._children.length > 0) {
        return d._children;
      } else {
        return null;
      }
    });
  };

  TreeFileSelected.prototype.makeTree = function() {
    var baseSvg;
    this.viewerWidth = this.el.offsetWidth;
    this.viewerHeight = 600;
    this.duration = 750;
    this.i = 0;
    this.tree = d3.layout.tree().size([this.viewerHeight, this.viewerWidth]);
    this.diagonal = d3.svg.diagonal().projection(function(d) {
      return [d.y, d.x];
    });
    this.zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", this.zoom);
    d3.select('svg').remove();
    d3.select("#tree_zoom_root").on("click", function(d, i) {
      return _Tree.newCenterNode(_Tree.root);
    });
    d3.select("#tree_center_root").on("click", function(d, i) {
      return _Tree.centerNode(_Tree.root);
    });
    baseSvg = d3.select(this.el).append("svg").attr("preserveAspectRatio", "xMinYMin meet").attr("viewBox", "0 0 " + this.viewerWidth + " " + this.viewerHeight).classed("svg-content", true).call(this.zoomListener);
    this.svgGroup = baseSvg.append("g");
    this.root = {
      name: "",
      server_id: -1,
      _id: -1,
      x0: 0,
      y0: 0
    };
    this.maxLabelLength = 1;
    return this.update(this.root);
  };

  TreeFileSelected.prototype.remove_node = function(p, c) {
    var i, results;
    if (!p) {
      return;
    }
    if (p.children) {
      i = p.children.length - 1;
      while (i >= 0) {
        if (p.children[i] === c) {
          p.children.splice(i, 1);
        }
        i--;
      }
    }
    if (p._children) {
      i = p._children.length - 1;
      results = [];
      while (i >= 0) {
        if (p._children[i] === c) {
          p._children.splice(i, 1);
        }
        results.push(i--);
      }
      return results;
    }
  };

  TreeFileSelected.prototype.newCenterNode = function(source) {
    var depth, scale, x, y;
    depth = 0;
    this.visit(source, (function(d) {
      depth = Math.max(d.depth, depth);
    }), function(d) {
      if (d.children && d.children.length > 0) {
        return d.children;
      } else {
        return null;
      }
    });
    scale = 1;
    x = 0;
    depth -= source.depth;
    y = -source.x0;
    while (x < 60) {
      x = -this.root.y0;
      x = x * scale + this.viewerWidth / 2;
      x = x - this.calc_dist_depth(depth, 6) / 2 * scale;
      if (x < 60) {
        scale -= 0.01;
      }
    }
    x -= this.calc_dist_depth(source.depth, 6) * scale;
    y = y * scale + this.viewerHeight / 2;
    d3.select('g').transition().duration(this.duration).attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
    this.zoomListener.scale(scale);
    return this.zoomListener.translate([x, y]);
  };

  TreeFileSelected.prototype.centerNode = function(source) {
    var scale, x, y;
    scale = this.zoomListener.scale();
    x = -source.y0;
    y = -source.x0;
    x = x * scale + this.viewerWidth / 2;
    y = y * scale + this.viewerHeight / 2;
    d3.select('g').transition().duration(this.duration).attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
    this.zoomListener.scale(scale);
    return this.zoomListener.translate([x, y]);
  };

  TreeFileSelected.prototype.calc_dist_depth = function(depth, mult) {
    var i, res;
    i = 0;
    res = 0;
    while (i < depth) {
      res += this.depthLength[i] * 2;
      ++i;
    }
    res += this.depthLength[depth];
    res *= mult;
    return res;
  };

  TreeFileSelected.prototype.update = function(source) {
    var childCount, levelWidth, link, links, menu, newHeight, node, nodeEnter, nodeExit, nodeUpdate, tree;
    levelWidth = [1];
    childCount = function(levelWidth, level, n) {
      if (n && n.children && n.children.length > 0) {
        if (levelWidth.length <= level + 1) {
          levelWidth.push(0);
        }
        levelWidth[level + 1] += n.children.length;
        n.children.forEach(function(d) {
          childCount(levelWidth, level + 1, d);
        });
      }
    };
    childCount(levelWidth, 0, this.root);
    newHeight = d3.max(levelWidth) * 25;
    tree = this.tree.size([newHeight, this.viewerWidth]);
    this.nodes = tree.nodes(this.root).reverse();
    links = tree.links(this.nodes);
    this.nodes.forEach(function(d) {
      if (!_Tree.depthLength[d.depth]) {
        return _Tree.depthLength[d.depth] = d.name.length;
      } else {
        return _Tree.depthLength[d.depth] = Math.max(d.name.length, _Tree.depthLength[d.depth]);
      }
    });
    this.nodes.forEach(function(d) {
      d.y = _Tree.calc_dist_depth(d.depth, 6);
    });
    node = this.svgGroup.selectAll('g.node').data(this.nodes, function(d) {
      return d.id || (d.id = ++_Tree.i);
    });
    menu = [
      {
        title: 'share',
        action: function(elm, d, i) {
          console.log(FileSystem._objects[d.server_id]);
          return mnm.modal_share._shareItem(FileSystem._objects[d.server_id]);
        }
      }
    ];
    nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', function(d) {
      return 'translate(' + source.y0 + ',' + source.x0 + ')';
    });
    nodeEnter.append('circle').attr('class', 'nodeCircle').attr('r', 0).style('fill', function(d) {
      if (d._ptr) {
        return '#f00';
      } else if (d._children && d._children.length > 0) {
        return 'lightsteelblue';
      } else {
        return '#fff';
      }
    }).on('click', this.click).on('contextmenu', d3.contextMenu(menu));
    nodeEnter.append('text').attr('x', function(d) {
      if (d.children || d._children) {
        return -10;
      } else {
        return 10;
      }
    }).attr('dy', '.35em').attr('class', 'nodeText').attr('text-anchor', function(d) {
      if (d.children || d._children) {
        return 'end';
      } else {
        return 'start';
      }
    }).text(function(d) {
      return d.name;
    }).style('fill-opacity', 0).on('click', this.click_focus).on('contextmenu', d3.contextMenu(menu));
    node.select('text').attr('x', function(d) {
      if (d.children || d._children) {
        return -10;
      } else {
        return 10;
      }
    }).attr('text-anchor', function(d) {
      if (d.children || d._children) {
        return 'end';
      } else {
        return 'start';
      }
    }).text(function(d) {
      return d.name;
    });
    node.select('circle.nodeCircle').attr('r', 4.5).style('fill', function(d) {
      if (d._ptr) {
        return '#f00';
      } else if (d._children && d._children.length > 0) {
        return 'lightsteelblue';
      } else {
        return '#fff';
      }
    });
    nodeUpdate = node.transition().duration(this.duration).attr('transform', function(d) {
      return 'translate(' + d.y + ',' + d.x + ')';
    });
    nodeUpdate.select('text').style('fill-opacity', 1);
    nodeExit = node.exit().transition().duration(this.duration).attr('transform', function(d) {
      return 'translate(' + source.y + ',' + source.x + ')';
    }).remove();
    nodeExit.select('circle').attr('r', 0);
    nodeExit.select('text').style('fill-opacity', 0);
    link = this.svgGroup.selectAll('path.link').data(links, function(d) {
      return d.target.id;
    });
    link.enter().insert('path', 'g').attr('class', 'link').attr('d', function(d) {
      var o;
      o = {
        x: source.x0,
        y: source.y0
      };
      return _Tree.diagonal({
        source: o,
        target: o
      });
    });
    link.transition().duration(this.duration).attr('d', this.diagonal);
    link.exit().transition().duration(this.duration).attr('d', function(d) {
      var o;
      o = {
        x: source.x0,
        y: source.y0
      };
      return _Tree.diagonal({
        source: o,
        target: o
      });
    }).remove();
    this.nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  };

  TreeFileSelected.prototype.toggleChildren = function(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else if (d._children) {
      d.children = d._children;
      d._children = null;
    }
    return d;
  };

  TreeFileSelected.prototype.click = function(d) {
    var model;
    if (d3.event.defaultPrevented) {
      return;
    }
    if (d._ptr && !d.children && !d._children) {
      model = FileSystem._objects[d.server_id];
      model.load(function(modelLoaded) {
        var ptr;
        return ptr = new Tree_ptr(modelLoaded, _Tree, d);
      });
    }
    d = _Tree.toggleChildren(d);
    return _Tree.update(d);
  };

  TreeFileSelected.prototype.click_focus = function(d) {
    if (d3.event.defaultPrevented) {
      return;
    }
    if (d._ptr) {
      return _Tree.newCenterNode(d);
    } else {
      return _Tree.centerNode(d);
    }
  };

  TreeFileSelected.prototype.zoom = function() {
    return _Tree.svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
  };

  TreeFileSelected.prototype.visit = function(parent, visitFn, childrenFn) {
    var children, count, i;
    if (!parent) {
      return;
    }
    visitFn(parent);
    children = childrenFn(parent);
    if (children) {
      count = children.length;
      i = 0;
      while (i < count) {
        this.visit(children[i], visitFn, childrenFn);
        i++;
      }
    }
  };

  TreeFileSelected.prototype.search_child = function(arr, id) {
    var j, len, n;
    for (j = 0, len = arr.length; j < len; j++) {
      n = arr[j];
      if (id === n.server_id) {
        return n;
      }
    }
    return 0;
  };

  TreeFileSelected.prototype.toJson = function(_this, d, m, depth, name) {
    var child, children, j, k, len, len1, ref, results, results1, str, val;
    if (depth == null) {
      depth = 0;
    }
    if (name == null) {
      name = m.constructor.name;
    }
    d.name = name;
    d.server_id = m._server_id;
    d.used = true;
    depth += 1;
    if (m instanceof Lst) {
      if (d.children) {
        children = d.children;
      }
      if (d._children) {
        children = d._children;
      }
      if (!(children instanceof Array)) {
        if (depth <= 3) {
          d.children = [];
          children = d.children;
        } else {
          d._children = [];
          children = d._children;
        }
      }
      results = [];
      for (j = 0, len = m.length; j < len; j++) {
        val = m[j];
        child = _this.search_child(children, val._server_id);
        if (child) {
          results.push(_this.toJson(_this, child, val, depth));
        } else {
          children.push({});
          results.push(_this.toJson(_this, children[children.length - 1], val, depth));
        }
      }
      return results;
    } else if (m instanceof Val || m instanceof Bool) {
      return d.name += " = " + (m.get());
    } else if (m instanceof Str) {
      str = m.get();
      if (str.length > 25) {
        str = str.substring(0, 25) + '...';
      }
      d.data = name + " = \"" + (m.get()) + "\"";
      return d.name += " = \"" + str + "\"";
    } else if (m instanceof Ptr) {
      d.name += " = \"" + m.data.value + "\"";
      return d._ptr = m.data.value;
    } else if (m instanceof TypedArray) {
      return d.name += " = " + m._size;
    } else if (m instanceof Model) {
      if (d.children) {
        children = d.children;
      }
      if (d._children) {
        children = d._children;
      }
      if (!(children instanceof Array)) {
        if (depth <= 3) {
          d.children = [];
          children = d.children;
        } else {
          d._children = [];
          children = d._children;
        }
      }
      ref = m._attribute_names;
      results1 = [];
      for (k = 0, len1 = ref.length; k < len1; k++) {
        val = ref[k];
        child = _this.search_child(children, m[val]._server_id);
        if (child) {
          results1.push(_this.toJson(_this, child, m[val], depth, val));
        } else {
          children.push({});
          results1.push(_this.toJson(_this, children[children.length - 1], m[val], depth, val));
        }
      }
      return results1;
    }
  };

  return TreeFileSelected;

})(Process);
// Generated by CoffeeScript 1.11.1
var SeachModelTree,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SeachModelTree = (function() {
  function SeachModelTree(tree, el_input, el_count, el_prev, el_next, callback) {
    var _this;
    this.tree = tree;
    this.el_input = el_input;
    this.el_count = el_count;
    this.el_prev = el_prev;
    this.el_next = el_next;
    this.set_result = bind(this.set_result, this);
    this.dataSearch = [];
    _this = this;
    this.old_search = "";
    this.el_input.onkeypress = function(e) {
      var keyCode;
      if (!e) {
        e = window.event;
      }
      keyCode = e.keyCode || e.which;
      if (keyCode === 13) {
        if (_this.old_search === _this.el_input.value) {
          _this.el_next.onclick();
        } else {
          _this.old_search = _this.el_input.value;
          callback(_this, _this.el_input.value);
        }
        return false;
      }
    };
    this.search_ressult = [];
    this.el_count.innerHTML = "0/0";
    this.index = 0;
    this.el_prev.onclick = function() {
      if (_this.search_ressult.length === 0) {
        return;
      }
      --_this.index;
      if (_this.index < 0) {
        _this.index = _this.search_ressult.length - 1;
      }
      _this.el_count.innerHTML = (_this.index + 1) + "/" + _this.search_ressult.length;
      return _this.tree.centerNode(_this.search_ressult[_this.index]);
    };
    this.el_next.onclick = function() {
      if (_this.search_ressult.length === 0) {
        return;
      }
      _this.index = (_this.index + 1) % _this.search_ressult.length;
      _this.el_count.innerHTML = (_this.index + 1) + "/" + _this.search_ressult.length;
      return _this.tree.centerNode(_this.search_ressult[_this.index]);
    };
  }

  SeachModelTree.prototype.set_result = function(array) {
    var res;
    this.search_ressult = array;
    this.index = 0;
    if (this.search_ressult.length === 0) {
      res = 0;
    } else {
      res = 1;
    }
    this.el_count.innerHTML = res + "/" + this.search_ressult.length;
    if (this.search_ressult.length !== 0) {
      return this.tree.centerNode(this.search_ressult[this.index]);
    }
  };

  return SeachModelTree;

})();
